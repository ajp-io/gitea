name: Create Replicated Release

on:
  push:
    branches: [ main ]
    paths:
      - 'gitea/**'
      - 'manifests/**'
  workflow_dispatch:

env:
  REPLICATED_APP: gitea-mastodon
  REPLICATED_API_ORIGIN: https://api.replicated.com/vendor

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Get current version and generate semantic version
        id: version
        run: |
          # Get current version using Docker container
          echo "Getting current version from Unstable channel..."

          channel_output=$(docker run --rm \
            -e REPLICATED_API_TOKEN="${{ secrets.REPLICATED_API_TOKEN }}" \
            -e REPLICATED_APP="${{ env.REPLICATED_APP }}" \
            replicated/vendor-cli:latest \
            channel inspect 2Xob31FcCoAQdbHBn44NLHSgeZF --output json 2>&1)

          echo "Channel output: $channel_output"

          current_version=$(echo "$channel_output" | jq -r '.releaseLabel // empty' 2>/dev/null)
          echo "Current version parsed: '$current_version'"

          # Check if we got a version
          if [[ -z "$current_version" || "$current_version" == "null" ]]; then
            echo "ERROR: Could not get current version from channel"
            exit 1
          fi

          echo "Using current version: $current_version"

          # Install semver and increment patch version
          npm install semver
          new_version=$(node -e "
            const semver = require('semver');
            const current = '$current_version';
            if (!semver.valid(current)) {
              throw new Error(\`Invalid semver version: \${current}\`);
            }
            console.log(semver.inc(current, 'patch'));
          ")

          echo "Incremented version: $current_version -> $new_version"
          echo "version=$new_version" >> $GITHUB_OUTPUT

      - name: Clean old Helm packages
        run: |
          if ls manifests/*.tgz >/dev/null 2>&1; then
            rm -f manifests/*.tgz
            echo "Cleaned old .tgz files"
          fi

      - name: Package Helm chart
        run: |
          helm package gitea -d manifests -u
          echo "Packaged Helm chart:"
          ls -la manifests/*.tgz

      - name: Create Replicated release
        uses: docker://replicated/vendor-cli:latest
        with:
          args: release create --lint --yaml-dir ./manifests --promote Unstable --version ${{ steps.version.outputs.version }}
        env:
          REPLICATED_API_TOKEN: ${{ secrets.REPLICATED_API_TOKEN }}
          REPLICATED_APP: ${{ env.REPLICATED_APP }}

      - name: Clean up artifacts
        if: always()
        run: |
          rm -f manifests/*.tgz
          echo "Cleaned up build artifacts"