name: Create Replicated Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      lint:
        description: 'Enable linting during release creation'
        required: false
        default: true
        type: boolean

env:
  REPLICATED_APP: gitea-mastodon
  REPLICATED_API_ORIGIN: https://api.replicated.com/vendor

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: List channels to find correct ID
        id: list_channels
        uses: docker://replicated/vendor-cli:latest
        with:
          args: channel ls --output json
        env:
          REPLICATED_API_TOKEN: ${{ secrets.REPLICATED_API_TOKEN }}
          REPLICATED_APP: ${{ env.REPLICATED_APP }}

      - name: Get Unstable channel version and generate semantic version
        id: version
        run: |
          # Get the Unstable channel ID and version from the channel list
          channels='${{ steps.list_channels.outputs.result }}'
          echo "Available channels: $channels"

          unstable_channel=$(echo "$channels" | jq -r '.[] | select(.name=="Unstable")')
          echo "Unstable channel: $unstable_channel"

          current_version=$(echo "$unstable_channel" | jq -r '.releaseLabel // "none"')
          echo "Current version: $current_version"

          # Check if current version follows semantic versioning (x.y.z format)
          if [[ $current_version =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # Parse and increment patch version
            IFS='.' read -r major minor patch <<< "$current_version"
            new_version="$major.$minor.$((patch + 1))"
          else
            # Current version is not semver, start with 1.0.0
            new_version="1.0.0"
          fi

          echo "New version: $new_version"
          echo "version=$new_version" >> $GITHUB_OUTPUT

      - name: Clean old Helm packages
        run: |
          if ls manifests/*.tgz >/dev/null 2>&1; then
            rm -f manifests/*.tgz
            echo "Cleaned old .tgz files"
          fi

      - name: Package Helm chart
        run: |
          helm package gitea -d manifests -u
          echo "Packaged Helm chart:"
          ls -la manifests/*.tgz

      - name: Create Replicated Release
        uses: docker://replicated/vendor-cli:latest
        with:
          args: release create --auto -y --version ${{ steps.version.outputs.version }}
        env:
          REPLICATED_API_TOKEN: ${{ secrets.REPLICATED_API_TOKEN }}
          REPLICATED_APP: ${{ env.REPLICATED_APP }}

      - name: Clean up artifacts
        if: always()
        run: |
          rm -f manifests/*.tgz
          echo "Cleaned up build artifacts"