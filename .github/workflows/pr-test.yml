name: PR Tests

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'gitea/**'
      - 'manifests/**'
      - '.github/workflows/pr-test.yml'  # Allow testing the workflow itself

env:
  REPLICATED_APP: gitea-mastodon
  REPLICATED_API_ORIGIN: https://api.replicated.com/vendor

jobs:
  # Temporarily disabled for KOTS testing iteration - will re-enable after KOTS test is working
  # test-embedded-cluster: (commented out entire job)

  test-kots:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Replicated CLI
        run: |
          curl -s https://api.github.com/repos/replicatedhq/replicated/releases/latest \
          | grep "browser_download_url.*linux_amd64.tar.gz" \
          | cut -d : -f 2,3 \
          | tr -d \" \
          | wget -O replicated.tar.gz -qi -
          tar xf replicated.tar.gz
          sudo mv replicated /usr/local/bin/

      - name: Generate test version
        id: version
        run: |
          # Generate unique version for PR testing using PR number, run number, and commit SHA
          COMMIT_SHORT=$(git rev-parse --short HEAD)
          VERSION="pr${{ github.event.pull_request.number }}-r${{ github.run_number }}-${COMMIT_SHORT}"
          echo "test_version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated unique test version: $VERSION"

      - name: Package Helm chart
        run: |
          # Clean any existing packages
          rm -f manifests/*.tgz

          # Package the chart
          helm package gitea -d manifests -u
          echo "Packaged chart:"
          ls -la manifests/*.tgz

      - name: Create test release
        run: |
          # Create release on Unstable channel for testing
          replicated release create \
            --lint \
            --yaml-dir ./manifests \
            --promote Unstable \
            --version "${{ steps.version.outputs.test_version }}"
        env:
          REPLICATED_API_TOKEN: ${{ secrets.REPLICATED_API_TOKEN }}
          REPLICATED_APP: ${{ env.REPLICATED_APP }}

      - name: Create K3S cluster
        id: cluster
        run: |
          # Create K3S cluster for KOTS testing
          COMMIT_SHORT=$(git rev-parse --short HEAD)
          CLUSTER_NAME="kots-pr${{ github.event.pull_request.number }}-r${{ github.run_number }}-${COMMIT_SHORT}"
          echo "Creating K3S cluster for KOTS testing: $CLUSTER_NAME (waiting up to 10 minutes)..."

          CLUSTER_OUTPUT=$(replicated cluster create \
            --distribution k3s \
            --version 1.33.4 \
            --instance-type r1.small \
            --name "$CLUSTER_NAME" \
            --wait 10m \
            --output json)

          echo "Cluster creation output:"
          echo "$CLUSTER_OUTPUT"

          # Extract cluster ID from output
          CLUSTER_ID=$(echo "$CLUSTER_OUTPUT" | jq -r '.id // empty')

          if [[ -z "$CLUSTER_ID" || "$CLUSTER_ID" == "null" ]]; then
            echo "❌ Failed to get cluster ID from output"
            exit 1
          fi

          echo "cluster_id=$CLUSTER_ID" >> $GITHUB_OUTPUT
          echo "✅ K3S cluster created and ready: $CLUSTER_ID"
        env:
          REPLICATED_API_TOKEN: ${{ secrets.REPLICATED_API_TOKEN }}

      - name: Setup kubectl and run KOTS install
        run: |
          # Get kubeconfig and set up kubectl
          echo "Setting up kubectl with cluster kubeconfig..."
          echo "Cluster ID: ${{ steps.cluster.outputs.cluster_id }}"

          # Get kubeconfig and check if it's valid
          replicated cluster kubeconfig ${{ steps.cluster.outputs.cluster_id }} > kubeconfig
          echo "Kubeconfig file size: $(wc -c < kubeconfig) bytes"
          echo "First few lines of kubeconfig:"
          head -5 kubeconfig || true

          export KUBECONFIG=$(pwd)/kubeconfig

          # Verify kubectl access
          echo "Verifying kubectl access..."
          kubectl get nodes
          kubectl get namespaces

          # Make script executable and transfer config
          chmod +x scripts/test-kots-install.sh
          cp test/config-values.yaml /tmp/config-values.yaml

          # Run KOTS installation test
          echo "Running KOTS installation test for version: ${{ steps.version.outputs.test_version }}"
          TEST_VERSION="${{ steps.version.outputs.test_version }}" \
          REPLICATED_API_TOKEN="${{ secrets.REPLICATED_API_TOKEN }}" \
          KUBECONFIG=$(pwd)/kubeconfig \
          ./scripts/test-kots-install.sh

          echo "KOTS test completed successfully!"
        env:
          REPLICATED_API_TOKEN: ${{ secrets.REPLICATED_API_TOKEN }}

      - name: Cleanup K3S cluster
        if: success()
        run: |
          if [[ -n "${{ steps.cluster.outputs.cluster_id }}" ]]; then
            echo "✅ Test passed! Cleaning up K3S cluster: ${{ steps.cluster.outputs.cluster_id }}"
            replicated cluster rm ${{ steps.cluster.outputs.cluster_id }} || true
            echo "Cluster cleanup completed"
          fi
        env:
          REPLICATED_API_TOKEN: ${{ secrets.REPLICATED_API_TOKEN }}

      - name: Clean up test artifacts
        if: always()
        run: |
          rm -f manifests/*.tgz
          rm -f kubeconfig
          echo "Cleaned up build artifacts"

      - name: Report test results
        if: always()
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "✅ KOTS installation test PASSED"
            echo "The changes in this PR work correctly with KOTS deployment."
          else
            echo "❌ KOTS installation test FAILED"
            echo "There may be issues with the changes in this PR. Please review the logs above."

            # Show cluster info for debugging
            if [[ -n "${{ steps.cluster.outputs.cluster_id }}" ]]; then
              echo ""
              echo "🔍 Debug Information:"
              echo "Cluster ID: ${{ steps.cluster.outputs.cluster_id }}"
              echo "Cluster has been left running for debugging (24h TTL)"
              echo "You can access it using: replicated cluster kubeconfig ${{ steps.cluster.outputs.cluster_id }}"
            fi
            exit 1
          fi